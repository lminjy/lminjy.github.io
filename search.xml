<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git简要使用</title>
      <link href="/2022/03/22/git-jian-yao-shi-yong/"/>
      <url>/2022/03/22/git-jian-yao-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Git简要使用"><a href="#Git简要使用" class="headerlink" title="Git简要使用"></a>Git简要使用</h1><p>学习的是菜鸟教程的<a href="https://www.runoob.com/git/git-tutorial.html">Git教程</a> ，使用的是windows版的Git Bash。</p><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>由于我未曾用过SVN、CVS等版本控制工具，在这里不作评价，先简单了解一下Git工作原理。</p><p>Git采用了分布式版本库的方式，即每个人将当前版本的代码拷贝到本地仓库各自进行修改，每个人都拥有全部的资源。</p><p>Git控制的相关信息储存在.git的隐藏目录中。</p><p>本地仓库的维护主要依赖三个区域：工作区、暂存区（Index）、HEAD。</p><ul><li>工作区：本地仓库所在目录，即我们直接处理代码的地方</li><li>暂存区：本质是文件索引，临时保存我们的修改</li><li>HEAD ：指向当前分支，保存最后提交的结果</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg"></p><p>工作流程如下：</p><ol><li>克隆 Git 资源（或创建本地仓库并关联远程服务器）</li><li>编辑、添加、删除文件</li><li>如果其他人提交修改，可以更新资源</li><li>在提交前检查修改</li><li>提交修改，推送到远程服务器</li><li>如果发现错误，可以撤回提交</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png"></p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>可以在本地创建一个Git仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init <span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 将当前目录初始化为Git仓库（生成.git目录）</span><span class="token function">git</span> add <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 跟踪修改（或新增）的文件文件，添加到暂存区</span><span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true"># 直接从暂存区删除文件，工作区则不做出改变</span><span class="token function">git</span> commit -m <span class="token string">"提交信息"</span>            <span class="token comment" spellcheck="true"># 保存修改到HEAD，但没有到远程仓库</span></code></pre><p>也可以克隆远端服务器上现有的Git仓库到本地</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>git repository<span class="token operator">></span> <span class="token operator">&lt;</span>local directory<span class="token operator">></span>        <span class="token comment" spellcheck="true"># 克隆Git仓库到当前目录</span><span class="token comment" spellcheck="true"># git repository 常为git://github.com:用户名/仓库名.git</span></code></pre><h3 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status <span class="token punctuation">[</span>-s<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看的是工作区和暂存区的状态，不显示已commit到项目历史的信息</span><span class="token comment" spellcheck="true"># 每次修改后都需要先add再commit</span><span class="token comment" spellcheck="true"># 可以使用git add -u 将之前跟踪的文件添加到暂存区</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示暂存区和工作区差异</span><span class="token function">git</span> reset HEAD<span class="token comment" spellcheck="true"># 暂存区的目录树被当前分支指向的目录树所替换</span><span class="token comment" spellcheck="true"># 工作区不受影响</span><span class="token function">git</span> checkout <span class="token keyword">.</span><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true"># 用暂存区全部或指定的文件替换工作区的文件</span><span class="token comment" spellcheck="true"># *危险！*，会清除工作区中未添加到暂存区中的改动</span><span class="token function">git</span> checkout HEAD <span class="token keyword">.</span><span class="token function">git</span> checkout HEAD <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true"># 用当前分支中的全部或者部分文件替换暂存区和以及工作区中的文件</span><span class="token comment" spellcheck="true"># *危险！*，会清除工作区、暂存区中的未提交改动</span><span class="token function">git</span> log <span class="token punctuation">[</span>--reverse --oneline --decorate<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看历史提交记录</span><span class="token comment" spellcheck="true"># --oneline 选项来查看历史记录的简洁的版本</span><span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看指定文件历史提交记录</span></code></pre><p><img src="https://img-blog.csdn.net/20180819222755855"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>Git多与github配合使用，一般将github作为远程仓库。</p><p>可以先设置git的用户名和邮箱</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的公司或个人邮箱"</span></code></pre><p>本地仓库和github仓库的传输是SSH加密的，需要RSA算法生成密钥：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"your_github_email"</span></code></pre><p>默认生成在~/.ssh</p><p>将其中的 <strong>公钥id_ras.pub</strong> 的内容上传到github账户 Setting =&gt; SSH and GPG keys =&gt; New SSSH key中的Key中。</p><p>验证连接是否成功可以输入:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><h3 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote -v                <span class="token comment" spellcheck="true"># 查看本地仓库配置的远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> origin         <span class="token comment" spellcheck="true"># 删除已关联的远程仓库</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>shortname<span class="token punctuation">(</span>多是origin<span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span class="token comment" spellcheck="true"># 将仓库连接到远程服务器</span><span class="token comment" spellcheck="true"># 远程仓库需先存在</span><span class="token function">git</span> branch -M main<span class="token function">git</span> push -u origin main    <span class="token comment" spellcheck="true"># 将当前分支推送到远程仓库的指定分支</span></code></pre><h3 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token comment" spellcheck="true"># 更新本地仓库至最新改动</span><span class="token comment" spellcheck="true"># 等效在工作区中获取（fetch）并合并（merge）远端的改动</span><span class="token function">git</span> fetch origin <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment" spellcheck="true"># 下载新分支与数据</span><span class="token function">git</span> merge origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span>    <span class="token comment" spellcheck="true"># 合并分支</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDZWckpBSmd5MWc1azByZG5pNGRqMzBtazBmdmRnZS5qcGc"></p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch                            <span class="token comment" spellcheck="true"># 列出本地分支</span><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>branch<span class="token operator">></span>                 <span class="token comment" spellcheck="true"># 创建并切换分支，不同的分支对应不同的工作目录</span><span class="token comment" spellcheck="true"># 实质是创建新的分支游标</span><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch<span class="token operator">></span>                 <span class="token comment" spellcheck="true"># 删除指定分支</span><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">></span>                     <span class="token comment" spellcheck="true"># 合并指定分支到当前分支</span><span class="token comment" spellcheck="true"># 会将删除指定分支没有的文件，创建指定分支添加的文件</span><span class="token comment" spellcheck="true"># 修改的文件会出现合并冲突，需要手动修改，再add,commit，保存结果</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>对Git有了较为基本的认识，剩下的就是更多的实践。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建博客</title>
      <link href="/2022/03/11/github-hexo-da-jian-ge-ren-bo-ke/"/>
      <url>/2022/03/11/github-hexo-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-Hexo搭建个人博客"><a href="#Github-Hexo搭建个人博客" class="headerlink" title="Github+Hexo搭建个人博客"></a>Github+Hexo搭建个人博客</h1><p>采用的是知乎上枫叶的<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）</a> 。</p><p>Github注册，Git安装不再赘述，Git的使用可以看</p><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>node.js的安装教程没有太多问题，值得关注的是其包管理器npm，如果不想把模块都安装到C盘，</p><p>需要设置npm安装全局模块的路径和环境变量。</p><p>在node.js安装的文件夹（以在D盘下为例）中创建新的文件夹node_cache、node_global。</p><p><strong>注意需要右键设置“属性“，在”安全“中编辑用户具有完全控制的权限。</strong> </p><p>在cmd中输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\nodejs\node_cache"</span></code></pre><p>设置环境变量（此电脑=&gt;右键属性=&gt;高级系统设置 =&gt; 环境变量）：</p><ul><li>在系统变量中创建新变量“NODE_PATH”，值为“D:\nodejs\node_global\node_modules”</li><li>在用户变量的Path中编辑npm的路径为“D:\nodejs\node_global”</li></ul><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>先在Github上创建<strong>”用户名.github.io“</strong> 的仓库，在Settings=&gt;Pages可以查看博客的一些配置，如域名。</p><p>新建文件夹Blog，右键打开Git Bush here（cmd还需要配置cnpm的环境变量），输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 更换npm的安装源</span>cnpm <span class="token function">install</span> -g hexo-cli            hexo inithexo s<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 博客上传路径在Blog\source\_posts</span>hexo cleanhexo g<span class="token punctuation">(</span>generate<span class="token punctuation">)</span></code></pre><p>但是目前仅能本机访问，还需部署到远程服务器</p><p>先部署到github上</p><p>打开Blog下的_config.yml 文件，在文件底部输入：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 注意冒号后空格(.yml文件)</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>lminjy/lminjy.github.io.git  <span class="token comment" spellcheck="true">#你的仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre><p>打开Git Bash，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-githexo d                <span class="token comment" spellcheck="true">#将博客部署到指定仓库</span></code></pre><p>部署完成后输入你的仓库名（如lminjy.github.io）就可以访问博客。</p><h3 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h3><p>Blog文件夹的目录如下：</p><pre><code>.├── _config.yml├── package.json├── node_modules├── public├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><ul><li><p><code>_config.yml</code> 是站点配置文件</p></li><li><p><code>package.json</code> 是应用程序信息，通常不需要关心</p></li><li><p><code>node_modules</code> 用来存放 <code>node</code> 相关的模块，通常不需要关心</p></li><li><p><code>scaffolds</code> 是模版文件夹，即每次新建文章时，都会根据模版文件来创建对应的 <code>.md</code> 文件</p></li><li><p><code>source</code> 是资源文件夹，用来存放用户资源的地方</p><p>除 <code>_posts</code> 文件夹之外，开头命名为 _的文件 / 文件夹和隐藏的文件将会被忽略</p></li><li><p><code>theme</code> 是主题文件夹，每个主题的配置需实具体情况而定</p></li><li><p><code>pulic</code> 是存储hexo生成页面的文件夹，其内容将会部署到github上</p></li></ul><h2 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>首先是定制域名，我选择的是腾讯云的域名lminjy.xyz。</p><p>购买域名后需要解析域名：将域名指向网站空间ip，即手动把域名地址和ip地址的对应关系写到DNS服务器上。</p><p>具体操作是打开控制台=&gt;我的域名=&gt;“解析”=&gt;添加记录，填写对应关系：</p><ul><li>主机记录主要填写www或@（不需要在域名前加www）</li><li>记录类型可选A（需要ip地址）或CNAME（可将域名指向另一个域名，由另一个域名提供ip地址）</li><li>域名的ip地址查询可以通过ping，如ping lminjy.github.io</li></ul><p>在source文件夹下，新建CNAME.txt，其内容为你的域名，记得删掉后缀</p><p><strong>域名过期</strong> 后如果不想绑定，只需</p><ul><li>清空CNAME文件，并提交</li><li>可能还需要清除浏览器缓存</li></ul><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>我选的是matery主题：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery themes/matery</code></pre><p>继续修改Blog下的_config.yml 文件（站点配置文件）：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 动物园 <span class="token comment" spellcheck="true">#标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'lminjyの博客'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 这是个人总结学习经验，记录生活点滴的博客。<span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Python<span class="token punctuation">,</span> 机器学习<span class="token punctuation">,</span> 嵌入式等<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##description,keywords是想让搜索引擎收录，便于SEO优化</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 星语     <span class="token comment" spellcheck="true">#作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN     <span class="token comment" spellcheck="true">#主题语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai    <span class="token comment" spellcheck="true">#中国的时区</span><span class="token comment" spellcheck="true"># Extensions</span><span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span><span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery   <span class="token comment" spellcheck="true">#主题改为matery</span></code></pre><p>主题语言看themes/next/language中的中文是 zh-CN 还是 zh-Hans。</p><p>在Blog下打开Git Bash，输入：</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre><p>稍等片刻，就可以输入自己的域名查看博客。</p><p>后续如果要上传博客，可以将自己写的.md文件复制到Blog\source_posts目录下，并重现部署</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>主体框架已经搭建完毕，接下来是对matery主题的修改，进行更多的个性化定制。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
