<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/23/github-hexo-da-jian-bo-ke/"/>
      <url>/2022/03/23/github-hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-Hexo搭建博客"><a href="#Github-Hexo搭建博客" class="headerlink" title="Github+Hexo搭建博客"></a>Github+Hexo搭建博客</h1><p>刘玲恒纵酒放达，或脱衣裸形在屋中，人见讥之。玲曰：“我以天地为栋宇，屋室为裈衣，诸君何为入我裈中！”我羡慕这股潇洒恣意，也希望拥有一方小天地供我挥斥方遒。</p><p>我采用的是主流的Github+Hexo搭建博客，网上的教程和答疑很多，采用的是知乎上枫叶的<a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）</a> 。</p><p>Github注册，Git安装与使用不再赘述，这是现代程序员不可获取的工具，相信大家都有所准备。</p><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>node.js的安装教程没有太多问题，值得关注的是其包管理器npm，如果不想它把模块都安装到C盘，需要设置npm在安装全局模块时的路径和环境变量。</p><p>在node.js安装的文件夹（以在D盘下为例）中创建新的文件夹node_cache、node_global。</p><p><strong>注意需要右键设置“属性“，在”安全“中编辑用户具有完全控制的权限。</strong> </p><p>在cmd中输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\nodejs\node_cache"</span></code></pre><p>设置环境变量（此电脑–&gt;右键属性–&gt;高级系统设置 –&gt; 环境变量）：</p><ul><li>在系统变量中创建新变量“NODE_PATH”，值为“D:\nodejs\node_global\node_modules”</li><li>在用户变量的Path中编辑npm的路径为“D:\nodejs\node_global”</li></ul><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>先在Github上创建<strong>”注册用户名.github.io“</strong> 的仓库，在Settings–&gt;Pages可以查看博客的一些配置，如域名。</p><p>新建文件夹Blog，右键打开Git Bush here（cmd还需要配置cnpm的环境变量），输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org    cnpm <span class="token function">install</span> -g hexo-cli            hexo inithexo s<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##博客上传路径在Blog\source\_posts</span>hexo cleanhexo g<span class="token punctuation">(</span>generate<span class="token punctuation">)</span></code></pre><p>但是目前仅能本机访问，还需部署到远端，我选择的是先部署到github上。</p><p>打开Blog下的_config.yml 文件，在文件底部输入：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">##注意空格</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>lminjy/lminjy.github.io.git  <span class="token comment" spellcheck="true">#你的仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre><p>打开Git Bash，安装Git部署插件：</p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-githexo d                <span class="token comment" spellcheck="true">#将博客部署到指定仓库</span></code></pre><p>部署完成后输入你的仓库名（如lminjy.github.io）就可以访问博客。</p><h2 id="个性化定制"><a href="#个性化定制" class="headerlink" title="个性化定制"></a>个性化定制</h2><p>首先是定制域名，我选择的是腾讯云的域名lminjy.xyz。</p><p>购买域名后需要解析域名：将域名指向网站空间ip，即手动把域名地址和IP地址的对应关系写到DNS服务器上。</p><p>具体操作是打开控制台，找到我的域名，点击“解析”，通过添加记录即可填写对应关系：</p><ul><li>主机记录主要填写www或@（不需要在域名前加www）</li><li>记录类型可选A（需要ip地址）或CNAME（可将域名指向另一个域名，由另一个域名提供ip地址）</li><li>域名的ip地址查询可以通过ping，如ping lminjy.github.io</li></ul><p>记得在source文件夹下，新建CNAME.txt，其内容为你的域名，然后删掉后缀即可</p><p>随后便是设置主题了，next功能集成多，但是有点简洁，满足不了我闷骚的内心，我选的是matery主题：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery themes/matery</code></pre><p>继续修改Blog下的_config.yml 文件（站点配置文件）：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 动物园 <span class="token comment" spellcheck="true">#标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'lminjyの博客'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token key atrule">keywords</span><span class="token punctuation">:</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 星语     <span class="token comment" spellcheck="true">#作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN     <span class="token comment" spellcheck="true">#主题语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai    <span class="token comment" spellcheck="true">#中国的时区</span><span class="token comment" spellcheck="true"># Extensions</span><span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span><span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery   <span class="token comment" spellcheck="true">#主题改为matery</span></code></pre><p>主题语言看themes/next/language中的简体中文是 zh-CN 还是 zh-Hans。</p><p>在Blog下打开Git Bash，输入：</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre><p>稍等片刻，就可以输入自己的域名查看博客。</p><p>后续如果要上传博客，可以将自己写的.md文件复制Blog\source_posts目录下，再输入</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>博客的大体框架目前已经完成，后续的任务是多写，多优化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/23/git-jian-yao-xue-xi/"/>
      <url>/2022/03/23/git-jian-yao-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>每次我对代码修改后，我都得不厌其烦的将其拷贝后重新命名，我常常忘记每次修改了什么，也对这枯燥而不必要的工作厌烦，因此Git的简要学习势在必行。</p><p>我学习的是菜鸟教程的<a href="https://www.runoob.com/git/git-tutorial.html">Git教程</a> ，使用的是windows版的Git Bash。</p><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>由于我未曾用过SVN、CVS等版本控制工具，在这里便不再拾人牙慧，简单的了解一下Git便于理清其工作原理。</p><p>Git采用了分布式版本库的方式，即每个人将当前版本的代码拷贝到本地仓库从而各自进行修改，每个人都拥有全部的资源。Git控制的相关信息储存在.git的隐藏目录中。</p><p>本地仓库的维护主要依赖三个区域：工作区、暂存区（Index）、HEAD。</p><ul><li><p>工作区：本地仓库所在目录，即我们直接处理代码的地方</p></li><li><p>暂存区：本质是索引，临时保存我们的修改</p></li><li><p>HEAD ：指向当前分支，保存最后提交的结果<img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg"></p><p>工作流程如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png"></p></li></ul><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>可以在本地创建一个Git仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true">#将当前目录初始化为Git仓库（生成.git目录）</span><span class="token function">git</span> add <span class="token operator">&lt;</span>file<span class="token operator">></span>                    <span class="token comment" spellcheck="true">#跟踪指定文件，添加到暂存区</span><span class="token function">git</span> commit -m <span class="token string">"提交信息"</span>            <span class="token comment" spellcheck="true">#保存修改</span></code></pre><p>也可以克隆一个现有的Git仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>git repository<span class="token operator">></span> <span class="token punctuation">[</span>new name<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">##克隆Git仓库到当前目录</span><span class="token comment" spellcheck="true">##git repository 常为git@github.com:用户名/仓库名.git</span></code></pre><p>查看修改</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status <span class="token punctuation">[</span>-s<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##查看的是工作区和暂存区的状态，不显示已commit到项目历史的信息</span><span class="token comment" spellcheck="true">##每次修改后都需要先add再commit</span><span class="token comment" spellcheck="true">##可以使用git add -u 将之前跟踪的文件添加到暂存区</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##显示暂存区和工作区差异</span><span class="token function">git</span> <span class="token function">diff</span> --cache <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##显示暂存区和最后提交的差异</span><span class="token function">git</span> reset <span class="token punctuation">[</span>--soft <span class="token operator">|</span> --mixed <span class="token operator">|</span> --hard<span class="token punctuation">]</span> <span class="token punctuation">[</span>HEAD~n <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">##mixed:回退HEAD版本，并更新(回退)Index(默认)</span><span class="token comment" spellcheck="true">##soft :回退HEAD版本</span><span class="token comment" spellcheck="true">##hard :回退HEAD版本，并更新(回退)Index和工作区（**危险!**）</span><span class="token function">git</span> log <span class="token punctuation">[</span>--reverse --oneline --decorate<span class="token punctuation">]</span><span class="token comment" spellcheck="true">##查看历史提交记录</span><span class="token function">git</span> blame <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token comment" spellcheck="true">##查看指定文件历史提交记录</span></code></pre><p><img src="https://img-blog.csdn.net/20180819222755855"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>Git多与github联系在一起，一般将github作为远程仓库。</p><p>可以先设置git的用户名和邮箱</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的公司或个人邮箱"</span></code></pre><p>本地仓库和github仓库的传输是SSH加密的，需要RSA算法配置密钥：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"your_github_email"</span></code></pre><p>默认生成在~/.ssh，将其中的公钥id_ras.pub的内容上传到github账户Setting-&gt; SSH and GPG keys-&gt; New SSSH key中的Key中。</p><p>验证连接是否成功可以输入:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>关联远程仓库：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add <span class="token punctuation">[</span>shortname<span class="token punctuation">(</span>多是origin<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#远程仓库需先存在</span><span class="token function">git</span> remote -v                <span class="token comment" spellcheck="true">#查看本地仓库配置的远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> origin         <span class="token comment" spellcheck="true">#删除已关联的远程仓库</span><span class="token function">git</span> fetch origin <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#下载新分支与数据</span><span class="token function">git</span> merge origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span>    <span class="token comment" spellcheck="true">#合并到当前分支，并会将更新同步到本地</span><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>my_branch<span class="token operator">></span> <span class="token operator">&lt;</span>origin/master<span class="token operator">></span><span class="token comment" spellcheck="true">##在新的远程分支上工作，操作实质是创建新的分支指向origin/master并切换过去</span><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch<span class="token operator">></span>     <span class="token comment" spellcheck="true">#将当前分支推送到远程仓库的指定分支</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93czEuc2luYWltZy5jbi9sYXJnZS8wMDZWckpBSmd5MWc1azByZG5pNGRqMzBtazBmdmRnZS5qcGc"></p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch                            <span class="token comment" spellcheck="true">#列出本地分支</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator">></span>                 <span class="token comment" spellcheck="true">#切换分支，不同的分支对应不同的工作目录。</span><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch<span class="token operator">></span>                 <span class="token comment" spellcheck="true">#删除指定分支</span><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator">></span>                     <span class="token comment" spellcheck="true">##合并指定分支到当前分支</span><span class="token comment" spellcheck="true">##会将删除指定分支没有的文件，创建指定分支添加的文件</span><span class="token comment" spellcheck="true">##修改的文件会出现合并冲突，需要手动修改，再add,commit，保存结果</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​    教程整理到这里已经对Git有了较为基本的认识，剩下的就是更多的实践，这样才能更深入的理解并掌握。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/23/markdown-yu-fa-xue-xi/"/>
      <url>/2022/03/23/markdown-yu-fa-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>采用的是Typora编辑.md文件。学习的是菜鸟教程中的<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a>，根据自己的使用习惯进行记录便于直接上手。需要注意的符号输入后敲击 <strong>空格</strong> 或 <strong>换行</strong> 实现效果。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用1-6个[^#] 可以表示1-6级标题</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>文字两端使用1-3个[^*] 可以分别表示 <em>斜体</em> 、 <strong>粗体</strong> 、 <em><strong>粗斜体</strong></em> </p><h2 id="线"><a href="#线" class="headerlink" title="线"></a>线</h2><p>在空白行连续使用三个以上[^*]来建立分割线</p><hr><p>文字两端加上两个[^~]可建立<del>删除线</del></p><p><u>下滑线</u> 通过HTML的&lt;u&gt;标签实现</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>[^脚注] 是通过 [^要注明的文字] 来实现的</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用[^*] ，有序列表使用[^数字加.]</p><p>列表嵌套只需在[^tab键加-] </p><p>注意符号后面接空格</p><ol><li>第一项<ul><li>子列表第一个元素</li><li>子列表第二个元素</li></ul></li><li>第二项</li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>段落开头使用[^&gt;]</p><blockquote><p>区块引用</p></blockquote><p>区块可多使用一个[^&gt;] 进行下一级嵌套，也可结合列表</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>[链接名称](链接地址)</p><p><a href="http://lminjy.xyz/">我的博客</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>![alt 属性文本](图片地址)</p><p>由于Markdown没法指定图片高度和宽度，可以使用&lt;img&gt;标签</p><p>如：</p><p>&lt;img src=”图片地址” width=”50%”&gt;</p><img src="https://img2.baidu.com/it/u=33681365,2840241919&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=729&amp;h=500" width="50%"><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>可在段首使用[^```] 包裹一段代码，并指定一种语言</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>教程整理到这里已经足以应付日常写作了，当然还缺少数学公式的书写方法，这个目前需求不大，留待需要时强化学习。</p><p>我始终认为语法的学习应该是短暂、快速的，像这样练手的写篇短文便算熟知了。</p><p>​真正富有创造力的从来都不是工具，而是人民群众。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/11/hello-world/"/>
      <url>/2022/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
